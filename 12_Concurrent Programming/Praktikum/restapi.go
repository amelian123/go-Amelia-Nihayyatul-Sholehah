package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AutoGenerated []struct {
	ID          int        `json:"id"`
	Title       string     `json:"title"`
	Price       float64    `json:"price"`
	Description string     `json:"description"`
	Category    string     `json:"category"`
	Image       string     `json:"image"`
	Rating      RatingData `json:"rating"`
}

type RatingData struct {
	Rate  float64 `json:"rate"`
	Count int     `json:"count"`
}

func main() {
	// URL of the REST API
	url := "https://fakestoreapi.com/products"

	// Create a channel to store the result of the API call
	resultChan := make(chan AutoGenerated)

	// Start a goroutine to call the API
	go func() {
		// Call the API
		resp, err := http.Get(url)
		if err != nil {
			// Send an empty result to the channel if there's an error
			resultChan <- AutoGenerated{}
			return
		}
		defer resp.Body.Close()

		// Parse the JSON response
		var result AutoGenerated
		err = json.NewDecoder(resp.Body).Decode(&result)
		if err != nil {
			// Send an empty result to the channel if there's an error
			resultChan <- AutoGenerated{}
			return
		}

		// Send the result to the channel
		resultChan <- result
	}()

	// Wait for the result from the channel
	select {
	case result := <-resultChan:
		// Print the result
		fmt.Println(result)
	case <-time.After(time.Second * 5):
		// Send an error message if the API call takes more than 5 seconds
		fmt.Println("Timeout")
	}
}
